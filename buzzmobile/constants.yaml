# Various constants for use throughout the project

# These all relate to the shape of the interal representation of the world,
# which is essentially a numpy array (or image) of `image_width` by
# `image_height` with a scale factor of `pixels_per_m`, corresponding to the
# number of pixels per each real-world meter.
image_width: 600 # pixels
image_height: 800 # pixels
pixels_per_m: 80 # pixels / meter

# A measurement of the width of the road in meters.
# This will be scaled to an appropriate size using `pixels_per_m` during
# construction of the GPS model image.
road_width: 2.438 # meters

# Number of bearings (angle from north in radians) that
# are kept track of to take a median in order to improve
# bearing calculation accuracy.
median_filter_size: 5

# Sigma values used to create the Gaussian kernel during
# the blurring of the image constructed during the construction
# of the GPS model image.
sigma_x: 3
sigma_y: 3

# Minimum distance a positional fix must be from the previous
# fix in order to add its bearing to the median filter. Used to
# improve bearing accuracy at low speeds.
min_fix_distance: 0.01 # meters

# Used for tentacle projection, travel distance is the step between each
# tentacle point, and num_points is the length of each tentacle, if using
# linear, and not tentacle projection, ignore
travel_distance: 0.061 # meters
num_points_in_tentacle: 50

# Hardware values dealing with the car to define Ackerman parameters
wheel_circumference: 2.198  # in meters, measured
wheel_base: 2.032 # distance between front and back axels in meters
wheel_separation: 1.3716 # distance between left and right wheels in meters

# Hardware defined maximal steering angle to not break the vehicle
max_steering_angle: 0.262 # radians (=15 degrees)

# Max speed of buzzmobile in m/s
max_speed: 0.2 #TODO: measure the max speed.

# Resolution of potential paths, that is to say, the higher this number, the
# more tentacles/linear paths will be judged
angle_multiplier: 10 # this * max_angle is number of angles to span

# Hardware defined car width, used to score projected tentacles in steering.
buzzmobile_width: 1.676 # meters

# Temporary max distance an obstacle can be for breaking to start. See issue #54
braking_distance: 2.5 # meters

# Threshold for score in braking calculation in steering.py
# If, in the immediate future path, there exists a lidar obstacle taking over
# (1 - braking_score_threshhold) percent of the pixels, then we brake.
braking_score_threshhold: 0.85
